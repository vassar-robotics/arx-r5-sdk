name: Test and Publish to PyPI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      publish_to_test_pypi:
        description: 'Publish to Test PyPI'
        required: false
        type: boolean
        default: false

jobs:
  build_wheels:
    name: Build wheels on Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Python 3.10 - Default on Ubuntu 22.04, available on 24.04
          - python-version: '3.10'
            cibw-python: 'cp310'
            architecture: 'x86_64'
          - python-version: '3.10'
            cibw-python: 'cp310'
            architecture: 'aarch64'
          # Python 3.11 - Available on both Ubuntu 22.04 and 24.04
          - python-version: '3.11'
            cibw-python: 'cp311'
            architecture: 'x86_64'
          - python-version: '3.11'
            cibw-python: 'cp311'
            architecture: 'aarch64'
          # Python 3.12 - Default on Ubuntu 24.04
          - python-version: '3.12'
            cibw-python: 'cp312'
            architecture: 'x86_64'
          - python-version: '3.12'
            cibw-python: 'cp312'
            architecture: 'aarch64'
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up QEMU
      if: matrix.architecture == 'aarch64'
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64
    
    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.16.2
    
    - name: Build wheels
      env:
        CIBW_BUILD: ${{ matrix.cibw-python }}-manylinux_${{ matrix.architecture }}
        CIBW_ARCHS_LINUX: ${{ matrix.architecture }}
        CIBW_BEFORE_ALL_LINUX: |
          # Update package manager and install cmake
          yum update -y --nogpgcheck || true
          yum install -y cmake --nogpgcheck || yum install -y cmake3 --nogpgcheck
        CIBW_BEFORE_BUILD: |
          pip install pybind11
        CIBW_ENVIRONMENT: |
          CMAKE_BUILD_PARALLEL_LEVEL=4
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: |
          python -c "import vassar_arx_r5_sdk; print('Import successful!')"
      run: python -m cibuildwheel --output-dir wheelhouse
    
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.python-version }}-${{ matrix.architecture }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel pybind11 cmake
    
    - name: Build sdist
      run: python setup.py sdist
    
    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  test_import:
    name: Test package import
    needs: [build_wheels]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: wheels-${{ matrix.python-version }}-x86_64
        path: dist
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install and test
      run: |
        pip install dist/*.whl
        python -c "import vassar_arx_r5_sdk; print(f'Successfully imported version {vassar_arx_r5_sdk.__version__}')"

  publish_test_pypi:
    needs: [build_wheels, build_sdist, test_import]
    runs-on: ubuntu-latest
    # Publish to Test PyPI on manual trigger or pre-release tags
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_test_pypi == 'true' ||
      github.event_name == 'push' && contains(github.ref, 'rc')
    
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: dist
    
    - name: Flatten directory structure
      run: |
        mkdir -p final_dist
        find dist -name "*.whl" -o -name "*.tar.gz" | xargs -I {} cp {} final_dist/
        rm -rf dist
        mv final_dist dist
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  publish_pypi:
    needs: [build_wheels, build_sdist, test_import]
    runs-on: ubuntu-latest
    # Only upload to PyPI on tagged releases
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/download-artifact@v4
      with:
        path: dist
    
    - name: Flatten directory structure
      run: |
        mkdir -p final_dist
        find dist -name "*.whl" -o -name "*.tar.gz" | xargs -I {} cp {} final_dist/
        rm -rf dist
        mv final_dist dist
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/